{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ankitsrivastava/Desktop/react/rich-todo/src/components/TasksList/index.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport DropButton from \"../DropButton\";\nimport Task from \"../Task\";\n\nconst TasksList = ({\n  tasks\n}, {\n  change\n}) => {\n  _s();\n\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef(null);\n  const dropButtonRef = useRef(null);\n  const [mouseDownY, setMouseDownY] = useState(0);\n\n  const onMouseDown = e => {\n    setIsDragging(true);\n    setSelectedNode(e.currentTarget);\n    setMouseDownY(e.pageY || e.changedTouches[0] && e.changedTouches[0].pageY);\n    e.currentTarget.style.zIndex = 1000;\n    document.body.style.overflow = 'hidden';\n  };\n\n  const onMouseMove = e => {\n    const top = (e.pageY || e.changedTouches[0] && e.changedTouches[0].pageY) - mouseDownY;\n\n    if (isDragging & top >= 0) {\n      selectedNode.style.transform = `translate3d(0,${top}px,0)`;\n      const dist = dropButtonRef.current.offsetTop - selectedNode.offsetTop - top - selectedNode.offsetHeight;\n\n      if (dist < 300) {\n        const delta = 1 - Math.max(300 - dist, 0) / 300 * 0.9;\n        const scale = Math.max(delta, 0.3);\n        selectedNode.style.transform += `scale3d(${scale},${scale},${scale})`;\n      }\n    }\n  };\n\n  const onMouseUp = e => {\n    setIsDragging(false);\n    e.currentTarget.style.zIndex = 0;\n    selectedNode.style.transform = `translate3d(0,0,0)`;\n    document.body.style.overflow = 'auto';\n  };\n\n  const allTasks = localStorage.getItem(\"tasks\");\n  const myTasks = JSON.parse(allTasks);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"task-list-container\",\n    onMouseMove: onMouseMove,\n    onTouchMove: onMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tasks-list ${isDragging ? 'disabled' : ''}`,\n      children: myTasks.map((task, i) => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        onMouseDown: onMouseDown,\n        onMouseUp: onMouseUp\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropButton, {\n      ref: dropButtonRef,\n      className: `${isDragging ? 'active' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TasksList, \"CruVt23zGlj4kZzjrkomchkcR0I=\");\n\n_c = TasksList;\nexport default TasksList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksList\");","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/rich-todo/src/components/TasksList/index.js"],"names":["useRef","useState","DropButton","Task","TasksList","tasks","change","selectedTask","setSelectedTask","selectedNode","setSelectedNode","isDragging","setIsDragging","containerRef","dropButtonRef","mouseDownY","setMouseDownY","onMouseDown","e","currentTarget","pageY","changedTouches","style","zIndex","document","body","overflow","onMouseMove","top","transform","dist","current","offsetTop","offsetHeight","delta","Math","max","scale","onMouseUp","allTasks","localStorage","getItem","myTasks","JSON","parse","map","task","i"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport DropButton from \"../DropButton\";\nimport Task from \"../Task\";\n\nconst TasksList = ({ tasks },{change}) => {\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef(null);\n  const dropButtonRef = useRef(null);\n  const [mouseDownY, setMouseDownY] = useState(0);\n\n  const onMouseDown = (e) => {\n    setIsDragging(true);\n    setSelectedNode(e.currentTarget);\n    setMouseDownY(e.pageY || (e.changedTouches[0] && e.changedTouches[0].pageY));\n    e.currentTarget.style.zIndex = 1000;\n    document.body.style.overflow = 'hidden';\n  }\n  const onMouseMove = (e) => {\n    const top = (e.pageY || e.changedTouches[0] && e.changedTouches[0].pageY) - mouseDownY;\n    if (isDragging & top >= 0) {\n      selectedNode.style.transform = `translate3d(0,${top}px,0)`;\n      const dist = dropButtonRef.current.offsetTop - selectedNode.offsetTop - top - selectedNode.offsetHeight;\n      if (dist < 300) {\n        const delta = (1 - (Math.max(300 - dist, 0) / 300 * 0.9));\n        const scale = Math.max(delta, 0.3);\n        selectedNode.style.transform += `scale3d(${scale},${scale},${scale})`;\n      }\n    }\n  }\n  const onMouseUp = (e) => {\n    setIsDragging(false);\n    e.currentTarget.style.zIndex = 0;\n    selectedNode.style.transform = `translate3d(0,0,0)`;\n    document.body.style.overflow = 'auto';\n  }\n\n  const allTasks = localStorage.getItem(\"tasks\")\n  const myTasks = JSON.parse(allTasks)\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"task-list-container\"\n      onMouseMove={onMouseMove}\n      onTouchMove={onMouseMove}\n    >\n      <div className={`tasks-list ${isDragging ? 'disabled' : ''}`}>\n        {myTasks.map((task, i) => (\n          <Task\n            key={i}\n            task={task}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n          />\n        ))}\n      </div>\n      <DropButton ref={dropButtonRef} className={`${isDragging ? 'active' : ''}`} />\n    </div>\n  )\n}\n\nexport default TasksList;\n"]},"metadata":{},"sourceType":"module"}